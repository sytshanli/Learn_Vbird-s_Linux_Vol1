Chapter13_学习Shell_Script
===

---

---

什么是 shell script
---

**为什么学习shell script**

- shell script 是利用shell的功能所写的一个程序，这个程序是使用纯文本文件，将一些shell的语法与命令（含外部命令）写在里面， **搭配正则表达式、管道命令与数据流重定向** 等功能，以达到我们所想要的处理目的
- shell script用在系统管理上面是很好的一项工具，但不适合用在处理大量数值运算上，因为shell script的速度较慢，使用的CPU资源较多，造成主机资源的分配不良

**第一个script的编写与执行**

- 注意事项
- - 命令的执行是从上而下，从左而右地分析与执行
- - 命令、参数间的多个空白会被忽略掉,`[tab]`键所得的空白同样被视为空格键
- - 空白行也将被忽略掉
- - 如果读取到一个Enter符号(CR)，就尝试开始执行该行（串）命令
- - 如果一行的内容太多，可以使用 **`\[Enter]`** 来扩展至下一行
- - **`#`** 可以作为批注，其后的数据将全部被视为批注文字而被忽略
- 命令执行（`.sh`文件必须具备可读与可执行(rx)的权限）
- - 使用绝对路径： **`/home/shell_exercise/test.sh`** 
- - 使用相对路径： 经常进入脚本文件所在的目录，然后 **`./test.sh`**  
- - 变量"PATH"：将test.sh放在PATH指定的目录内
- - 通过 **`bash test.sh`** 执行命令
- shell script 
- - **`#!/bin/bash`** 声明这个文件内的语法使用bash语法，当程序被执行时，能够加载bash的相关环境配置文件（一般就是 **`non-login shell`** 的 **`~/.bashrc`**）
- - 有需要的话，可以设置一下 **PATH变量**  
- - 告知执行结果，可以用 **`exit n（数字）`** 中断程序，并回传一个数值给系统，可以用 **`echo $?`** 查看回传的值。 **依此，我们可以自定义错误信息，做很多事情**

**编写shell script的良好习惯**

- 在每个script的文件头处记录
- - script的 功能
- - script的 版本信息
- - script的 作者与联络方式
- - script的 的版权声明方式
- - script的 History
- - script内较特殊的命令，使用“绝对路径”的方式来执行
- - script执行时需要的环境变量预先声明与设置
- 最好使用vim编写script，而不是vi，vim有额外的语法

---

简单的 shell script 练习
---

**简单范例**

- 输出中处理特殊字符 **`echo -e "Meaasge \a \n \r"`** （-e 参数）
- 用户输入 **`read -p "Message" variable_name`** （read 用法）
- 变量名命名规则
- - 首个字符必须为字母(a-z,A-Z)
- - **变量名和等号之间不能有空格**，可以使用下划线_
- - 不能使用标点符号
- - 不能使用bash里的关键字（可用help命令查看保留关键字）

**两个命令**

- 命令 **`filename=${fileuser:-"filename"}`**
- - 当 fileuser 未被赋值或空，filename取"-"后面的值；否则 filename=$fileuser
- 命令 **`filename=${fileuser-"filename"}`**
- - 当 fileuser 未被赋值，filename取"-"后面的值；否则 filename=$fileuser

**运算**

- 第一种方式： **`declare -i total=$firstnu*$secnu`**
- - 乘号左右不能有空格！！！
- 第二种方式： **`total=$(($firstnu * $secnu))`**
- - 两个小括号内可以加上空格符

**script的执行方式区别**

- 直接命令执行（无论是绝对路径/相对路径还是PATH内），或者是利用bash(或sh)来执行脚本时，该script都会使用一个新的bash环境来执行脚本内命令
- - script是在子进程的bash内执行的，当子进程完成后， **子进程内的各项变量或操作将会结束而不会传回到父进程中** 
- 利用source执行脚本，在父进程中执行

---

善用判断式
---

**利用test命令的测试功能**

- P380~P381 有大量的参数

**利用判断符号[]**

- 因为中括号用在很多地方，包括通配符与正则表达式等
- - 所以如果要在bash的语法当中使用中括号作为shell的判断式时， **括号的两端必须要有空格符来分隔** 
- 在中括号[]内的每个组件都需要 **有空格键来分隔** 
- 在中括号[]内的 **变量** ，最好都 **以双引号括起来** 
- 在中括号[]内的 **常量** ，最好都 **以单或双引号括起来** 

**shell script 的默认变量($0,$1...)**

- $#: **代表后接的参数“个数”**，从$1开始数
- $@: **代表"$1","$2","$3"之意** ，每个变量是独立的（用双引号括起来）
- $*: **代表"$1c$2c$3"之意** ，c为分隔符，默认为空格，所以 **代表“$1 $2 $3”之意** 
- $@和$* 有所不同，一般用 $@ 即可

**shift造成参数变量号码偏移**

- shift会移动变量，把$1,$2,...左移，左边的就没了。。。
- shift后可加数字，左移几位（前几位就么得了。。。），不加数字默认为1

---

条件判断式
---

**利用 if...then **

```
if [  ] ; then
    statements1
elif [  ] ; then
    statements2
else
    statements3
fi
```

**利用 case...esac **

```
case $variable_name in
    "one")
        statements1
        ;;
    "two")
        statements2
        ;;
esac    
```

**利用 function 功能**

- 函数可以在 shell script 当中做出一个类似自定义执行命令的东西
- 因为 shell script 的 **执行方式是由上而下、由左而右** ，
- - 因此在 shell script 当中的 **function 的设置一定要在程序的最前面** 
- function 也是拥有内置变量的。
- - 与 shell script 很类似， **函数名称$0，后续变量也是以 $1,$2...来替代的** 

---

循环(loop)
---

**while do done （不定循环）**


- 当 condition **条件成立时，进行循环**   

```
while [ condition ]
do
    statements
done
```

**until do done （不定循环）**

- 当 condition **条件成立时，终止循环**   

```
until [ condition ]
do
    statements
done
```

**for...do...done（固定循环）**

```
for var in con1 con2 con3 ...
do
    statements
done
```

- 例子：**`for i in $(seq 1  100)`** 
- - seq 1 100 能生成 `[1,100]` 的序列
- ping 的两个参数
- - 参数 **`-c`** ，表示ping的次数，1为1次
- - 参数 **`-w`** ，表示time out的时间，单位为秒
- - 命令样例 **`ping -c 1 -w 1 www.google.com`**

**for...do...done 的数值处理**

```
for((var=初值;var限制;执行步长))
do
    statements
done
```

- **初始值** ：某个变量在循环当中的初始值，直接以类似 i=1 设置好
- **限制值** ：当变量的值在这个限制值的范围内，就继续进行循环，例如 i<-100 
- **执行步长** ：每做一次循环时变量的变化量。例如 i=i+1
- - 如果每次增加1，则可以使用类似 i++ 的方式

---

shell script的追踪与调试
---

- 命令 **`bash -[nvx] filename.sh`**
- - 参数n，不执行script，仅查询语法问题；
- - 参数v，在执行script前，先将script的内容输出到屏幕上（cat即视感）
- - **参数x，将使用到的script内容显示到屏幕上（很有用的参数）** 
- 学习方法建议
- - **网友写的脚本、系统的脚本** ，多看多模仿，并修改成自己的样式，效果好，见效快

---

---

Chapter13_学习Shell_Script End~
===